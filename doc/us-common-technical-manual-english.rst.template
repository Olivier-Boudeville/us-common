.. _Top:


.. title:: Welcome to the US-Common documentation

.. comment stylesheet specified through GNUmakefile


.. role:: raw-html(raw)
   :format: html

.. role:: raw-latex(raw)
   :format: latex


:raw-html:`<a name="us-common_top"></a>`

:raw-html:`<div class="banner"><p><em>US-Common documentation</em> <a href="http://us-common.esperide.org">browse latest</a> <a href="https://olivier-boudeville.github.io/us-common/index.html">browse mirror</a> <a href="us-common-technical-manual-english.pdf">get PDF</a> <a href="#us-common_top">go to top</a> <a href="#us-common_toc">go to toc</a> <a href="#us-common_bottom">go to bottom</a> <a href="api-doc/index.html">browse API</a> <a href="https://github.com/Olivier-Boudeville/us-common">go to project</a> <a href="mailto:about(dash)us-common(at)esperide(dot)com?subject=[US-Common]%20Remark">email us</a></p></div>`



:raw-html:`<center><img src="us-common-title.png" width="40%"></img></center>`
:raw-latex:`\centering \includegraphics[scale=1.1]{us-common-title.png}`



===========================================
Technical Manual of the ``US-Common`` Layer
===========================================


:Organisation: Copyright (C) 2019-2021 Olivier Boudeville
:Contact: about (dash) us-common (at) esperide (dot) com
:Creation date: Saturday, May 2, 2020
:Lastly updated: GENERATION_DATE
:Version: PROJECT_VERSION
:Status: Stable
:Dedication: Users and maintainers of the ``US-Common`` layer.
:Abstract:

	The role of the `US-Common <http://us-common.esperide.org/>`_ layer (part of the `Universal Server <https://github.com/Olivier-Boudeville/Universal-Server>`_ project) is to provide base elements on which the various *Universal Services* are built, notably:

	- the Universal Server itself: see `US-Main <http://us-main.esperide.org/>`_
	- the Universal Webserver: see `US-Web <http://us-web.esperide.org/>`_

	We present here a short overview of these services, to introduce them to newcomers.

	The next level of information is either to browse the `US-Common API documentation <api-doc/index.html>`_ or simply to read the corresponding `source files <https://github.com/Olivier-Boudeville/us-common/tree/master/src>`_, which are intensely commented and generally straightforward.


.. meta::
   :keywords: US-Common


The latest version of this documentation is to be found at the `official US-Common website <http://us-common.esperide.org>`_ (``http://us-common.esperide.org``).

:raw-html:`This US-Common documentation is also available in the PDF format (see <a href="us-common-technical-manual-english.pdf">us-common-Layer-technical-manual-english.pdf</a>), and mirrored <a href="https://olivier-boudeville.github.io/us-common/">here</a>.`

:raw-latex:`The documentation is also mirrored \href{https://olivier-boudeville.github.io/us-common/}{here}.`


:raw-latex:`\pagebreak`

:raw-html:`<a name="us-common_toc"></a>`

.. _`table of contents`:

.. contents:: **Table of Contents**
	:depth: 3


:raw-latex:`\pagebreak`

--------
Overview
--------


The `US-Common <http://us-common.esperide.org/>`_ layer is the basis (lowest-level) of the `Universal Server <https://github.com/Olivier-Boudeville/Universal-Server>`_ project.

Its purpose is to provide base elements on which the various *Universal Services* are built, notably:

- the Universal Server itself: see `US-Main <http://us.esperide.org/>`_
- the Universal Webserver: see `US-Web <http://us-web.esperide.org/>`_

We present here a short overview of these services, to introduce them to newcomers.

The next level of information is to read the corresponding `source files <https://github.com/Olivier-Boudeville/us-common/tree/master/src>`_, which are intensely commented and generally straightforward.

The project repository is located `here <https://github.com/Olivier-Boudeville/us-common>`_.


-----------
Layer Stack
-----------

From the highest level to the lowest, as shown `here <https://github.com/Olivier-Boudeville/Universal-Server>`_, usually a software stack involving US-Common is structured that way:

- an applicative layer such as `US-Main <http://us-main.esperide.org/>`_ or `US-Web <http://us-web.esperide.org/>`_, etc.
- `US-Common <http://us-common.esperide.org/>`_ (this layer)
- `Ceylan-Traces <http://traces.esperide.org>`_ (for advanced runtime traces)
- `Ceylan-WOOPER <http://wooper.esperide.org>`_ (for OOP)
- `Ceylan-Myriad <http://myriad.esperide.org>`_ (as an Erlang toolbox)
- `Erlang <http://erlang.org>`_ (for the compiler and runtime)
- `GNU/Linux <https://en.wikipedia.org/wiki/Linux>`_

The shorthand for ``US-Common`` is ``uc``.

:raw-latex:`\pagebreak`


---------------------------------
Facilities Provided by this Layer
---------------------------------

These are mainly common services centralised here so that the various US applications can make use of them:

- `USServer <https://github.com/Olivier-Boudeville/us-common/blob/master/src/class_USServer.erl>`_: a general **abstraction of a server**, so that all US ones inherit the corresponding base features (ex: name registration, uptime information, applicative ping, state description, etc.)

- `USConfigServer <https://github.com/Olivier-Boudeville/us-common/blob/master/src/class_USConfigServer.erl>`_: a server (usually a singleton) in charge of **managing all US-level configuration information** on behalf of the other US servers; this comprises the look-up, parsing and checking of the relevant configuration files, the setting of the corresponding information then made available to the rest of the US framework (EPMD port, TCP port range, cookie, execution context, application and log directories, name and scope of registrations, user/group information, etc.)

- `USScheduler <https://github.com/Olivier-Boudeville/us-common/blob/master/src/class_USScheduler.erl>`_: a server whose purpose is to **schedule any kind of asynchronous, independent tasks** (think: "crontab on steroids"); it allows planning task commands to be issued to actuators one time, multiple ones, or indefinitely, based on user-level periods with various policies, on a best-effort basis yet reliably (proper time and timer management), trying to find a balance between the respect of the requested periodicities and the correction of any delay incurred (see also a `corresponding test <https://github.com/Olivier-Boudeville/us-common/blob/master/test/class_USScheduler_test.erl>`_ of it)

- `USTaskRing <https://github.com/Olivier-Boudeville/us-common/blob/master/src/class_USTaskRing.erl>`_: a facility useful to **schedule a set of periodic tasks synchronously** (no overlapping between them) **and uniformly** (as evenly as possible over time); typically useful to pace regularly a set of actions of indefinite number that are ruled by a common periodicity and/or to share a resource unable to cope with concurrent accesses (ex: a non-reentrant third-party log analysis tool that maintains its own opaque state on filesystem, yet have to operate on a set of virtual hosts)



.. _`free software`:


-------
Licence
-------

``US-Common`` is licensed by its author (Olivier Boudeville) under the `GNU Affero General Public License <https://www.gnu.org/licenses/agpl-3.0.en.html>`_ as published by the Free Software Foundation, either version 3 of this license, or (at your option) any later version.

This allows the use of the US-Common code in a wide a variety of software projects, while still maintaining copyleft on this code, ensuring improvements are shared.

We hope indeed that enhancements will be back-contributed (ex: thanks to merge requests), so that everyone will be able to benefit from them.



---------------------------------
Current Stable Version & Download
---------------------------------

We prefer using GNU/Linux, sticking to the latest stable release of Erlang, and building it from sources, thanks to GNU ``make``.

As mentioned, the single, direct prerequisite of `US-Common <https://github.com/Olivier-Boudeville/US-Common>`_ is `Ceylan-Traces <https://github.com/Olivier-Boudeville/Ceylan-Traces>`_, which implies in turn `Ceylan-WOOPER <https://github.com/Olivier-Boudeville/Ceylan-WOOPER>`_, then `Ceylan-Myriad <https://github.com/Olivier-Boudeville/Ceylan-Myriad>`_ and `Erlang <http://erlang.org>`_.

Refer to the corresponding `Myriad prerequisite section <http://myriad.esperide.org#prerequisites>`_  for more precise guidelines, knowing that US-Common does not need modules with conditional support such as ``crypto`` or ``wx``.



Using Cutting-Edge GIT
======================

This is the installation method that we use and recommend; the US-Common ``master`` branch is meant to stick to the latest stable version: we try to ensure that this main line always stays functional (sorry for the pun). Evolutions are to take place in feature branches and to be merged only when ready.

Once Erlang is available, it should be just a matter of executing:

.. code:: bash

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-Myriad myriad
 $ cd myriad && make all && cd ..

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-WOOPER wooper
 $ cd wooper && make all && cd ..

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-Traces traces
 $ cd traces && make all && cd ..

 # Note the dash becoming an underscore, for OTP compliance:
 $ git clone https://github.com/Olivier-Boudeville/us-common us_common
 $ cd us_common && make all


Running a corresponding test just then boils down to:

.. code:: bash

 $ cd test && make class_USScheduler_run CMD_LINE_OPT="--batch"


Should LogMX be installed and available in the PATH, the test may simply become:

.. code:: bash

 $ make class_USScheduler_run


:raw-html:`<a name="otp"></a>`

.. _`otp-build`:

Using OTP-Related Build/Runtime Conventions
===========================================

As discussed in these sections of `Myriad <http://myriad.esperide.org/myriad.html#otp>`_, `WOOPER <http://wooper.esperide.org/index.html#otp>`_ and `Traces <http://traces.esperide.org/index.html#otp>`_, we added the (optional) possibility of generating a US-Common *OTP application* out of the build tree, ready to be integrated into an *(OTP) release*. For that we rely on `rebar3 <https://www.rebar3.org/>`_, `relx <https://github.com/erlware/relx>`_ and `hex <https://hex.pm/>`_.

Unlike Myriad (which is an OTP *library* application), US-Common is (like WOOPER and Traces) an OTP *active* application, meaning the reliance on an application that can be started/stopped (``us_common_app``), a root supervisor (``us_common_sup``) and, here, two proper supervisor bridges (``us_common_scheduler_bridge_sup`` and ``us_common_config_bridge_sup``).

..
 As for Myriad, WOOPER and Traces, most versions of US-Common are also published as `Hex packages <https://hex.pm/packages/us_common>`_.

 For more details, one may have a look at `rebar.config.template <https://github.com/Olivier-Boudeville/us-common/blob/master/conf/rebar.config.template>`_, the general rebar configuration file used when generating the US-Common OTP application and release (implying the automatic management of Myriad, WOOPER and Traces).

 Once the steps listed in `Using Cutting-Edge GIT`_ have been performed, an OTP-level testing can be done as well, based on ``us_common_otp_application_test``; from the root of US-Common:


  code:: bash

  $ cd test && make us_common_otp_application_run CMD_LINE_OPT="--batch"


 All relevant OTP applications shall be started in turn, US-Common shall then be ready for use, until all these applications are orderly shutdown.

 One may run ``make create-us-common-checkout`` in order to create, based on our conventions, a suitable ``_checkouts`` directory so that rebar3 can directly take into account local, directly available (in-development) dependencies (here, Myriad, WOOPER and Traces).



-------
Support
-------

Bugs, questions, remarks, patches, requests for enhancements, etc. are to be reported to the `project interface <https://github.com/Olivier-Boudeville/us-common>`_ (typically `issues <https://github.com/Olivier-Boudeville/us-common/issues>`_) or directly at the email address mentioned at the beginning of this document.




-------------
Please React!
-------------

If you have information more detailed or more recent than those presented in this document, if you noticed errors, neglects or points insufficiently discussed, drop us a line! (for that, follow the Support_ guidelines).



-----------
Ending Word
-----------

Have fun with US-Common!


:raw-html:`<center><img src="us-common-title.png" width="25%"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.7]{us-common-title.png} \end{figure}`

:raw-html:`<a name="us-common_bottom"></a>`
